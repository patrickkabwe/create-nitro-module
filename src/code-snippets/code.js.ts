import { toPascalCase } from '../utils'

export const appExampleCode = (
    moduleName: string,
    finalModuleName: string,
    funcName: string
) => `import React from 'react';
import { Text, View, StyleSheet } from 'react-native';
import { ${toPascalCase(moduleName)} } from '${finalModuleName}';

function App(): React.JSX.Element {
  return (
    <View style={styles.container}>
      <Text style={styles.text}>
      {${toPascalCase(moduleName)}.${funcName}(1, 2)}
      </Text>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  text: {
    fontSize: 40, 
    color: 'green'
  }
});

export default App;`

export const specCode = (
    moduleName: string,
    platformLang: string,
    funcName: string
) => `import { type HybridObject } from 'react-native-nitro-modules'

export interface ${toPascalCase(
    moduleName
)} extends HybridObject<{ ${platformLang} }> {
  ${funcName}(num1: number, num2: number): number
}`

export const exportCode = (
    moduleName: string
) => `import { NitroModules } from 'react-native-nitro-modules'
import type { ${toPascalCase(moduleName)} as ${toPascalCase(
    moduleName
)}Spec } from './specs/${moduleName}.nitro'

export const ${toPascalCase(moduleName)} =
  NitroModules.createHybridObject<${toPascalCase(
      moduleName
  )}Spec>('${toPascalCase(moduleName)}')`

export const metroConfig = `const { getDefaultConfig, mergeConfig } = require('@react-native/metro-config');
const path = require('path');
const root = path.resolve(__dirname, '..');

/**
 * Metro configuration
 * https://facebook.github.io/metro/docs/configuration
 *
 * @type {import('metro-config').MetroConfig}
 */
const config = {
  watchFolders: [root],
  resolver: {
    unstable_enablePackageExports: true,
  },
};

module.exports = mergeConfig(getDefaultConfig(__dirname), config);`

export const babelConfig = `const path = require('path');
const pak = require('../package.json');

module.exports = api => {
  api.cache(true);
  return {
    presets: ['module:@react-native/babel-preset'],
    plugins: [
      [
        'module-resolver',
        {
          extensions: ['.js', '.ts', '.json', '.jsx', '.tsx'],
          alias: {
            [pak.name]: path.join(__dirname, '../', pak.source),
          },
        },
      ],
    ],
  };
};`

export const exampleTsConfig = (finalModuleName: string) => `{
  "extends": "@react-native/typescript-config/tsconfig.json",
  "compilerOptions": {
    "strict": true,
    "baseUrl": ".",
    "paths": {
      "${finalModuleName}": ["../src"]
    }
  }
}`

export const postScript = (moduleName: string) => `/**
* @file This script is auto-generated by create-nitro-module and should not be edited.
*
* @description This script applies a workaround for Android by modifying the '<ModuleName>OnLoad.cpp' file.
* It reads the file content and removes the 'margelo/nitro/' string from it. This enables support for custom package names.
*
* @module create-nitro-module
*/
const path = require('node:path')
const { writeFile, readFile } = require('node:fs/promises')

const androidWorkaround = async () => {
 const androidOnLoadFile = path.join(
   process.cwd(),
   'nitrogen/generated/android',
   '${moduleName}OnLoad.cpp'
 )

 const str = await readFile(androidOnLoadFile, { encoding: 'utf8' })
 await writeFile(androidOnLoadFile, str.replace('margelo/nitro/', ''))
}
androidWorkaround()`

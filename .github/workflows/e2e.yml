name: E2E Test with Maestro

on:
    workflow_run:
        workflows: ['Generate Packages']
        types:
            - completed
    workflow_dispatch:

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    android-test:
        name: Android E2E Test
        runs-on: ubuntu-latest

        strategy:
            matrix:
                package-type: ['module', 'view']
                mode: ['Debug', 'Release']
                pm: ['bun']

        env:
            WORKING_DIR: ${{ github.workspace }}/react-native-test-${{ matrix.package-type }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Enable KVM (Android emulator)
              if: runner.os == 'Linux'
              run: |
                  echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
                  sudo udevadm control --reload-rules
                  sudo udevadm trigger --name-match=kvm

            - name: Create working directory
              run: mkdir -p ${{ env.WORKING_DIR }}

            - name: Download generated module
              uses: actions/download-artifact@v4
              with:
                  name: test-${{ matrix.package-type }}-${{ matrix.pm }}
                  path: ${{ env.WORKING_DIR }}
                  run-id: ${{ github.event.workflow_run.id }}
                  github-token: ${{ github.token }}

            - name: List package structure
              working-directory: ${{ env.WORKING_DIR }}
              run: find . -type f | head -30

            - name: Setup Bun
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: latest

            - name: Cache Bun dependencies
              uses: actions/cache@v4
              with:
                  path: ~/.bun/install/cache
                  key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lock', '**/bun.lockb') }}
                  restore-keys: |
                      ${{ runner.os }}-bun-

            - name: Install dependencies
              working-directory: ${{ env.WORKING_DIR }}
              run: ${{ matrix.pm }} install

            - name: Run codegen and build
              working-directory: ${{ env.WORKING_DIR }}
              run: |
                  bunx nitro-codegen --logLevel="debug"
                  ${{ matrix.pm }} run build
                  node post-script.js

            - name: Setup Java
              uses: actions/setup-java@v4
              with:
                  distribution: 'zulu'
                  java-version: '17'
                  cache: 'gradle'

            - name: Setup Android SDK
              uses: android-actions/setup-android@v3

            - name: Install Maestro CLI
              run: |
                  curl -Ls "https://get.maestro.mobile.dev" | bash
                  echo "$HOME/.maestro/bin" >> $GITHUB_PATH

            - name: Run Android Emulator and E2E Tests
              uses: reactivecircus/android-emulator-runner@v2
              with:
                  api-level: 35
                  target: google_apis
                  arch: x86_64
                  profile: Galaxy Nexus
                  emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
                  disable-animations: true
                  script: |
                      echo "âœ… Emulator started"

                      ANDROID_DIR="${{ env.WORKING_DIR }}/example/android"

                      chmod +x "$ANDROID_DIR/gradlew"

                      echo "ðŸ”¨ Building Android app (${{ matrix.mode }})..."
                      "$ANDROID_DIR/gradlew" assemble${{ matrix.mode }} --no-daemon --stacktrace

                      APK_DIR="$ANDROID_DIR/app/build/outputs/apk/$(echo '${{ matrix.mode }}' | tr '[:upper:]' '[:lower:]')"
                      APK_PATH="$APK_DIR/app-$(echo '${{ matrix.mode }}' | tr '[:upper:]' '[:lower:]').apk"

                      echo "ðŸ“¦ APK path: $APK_PATH"

                      echo "ðŸ“± Installing APK..."
                      adb install -r "$APK_PATH"

                      APP_ID="com.test${{ matrix.package-type }}example"
                      echo "ðŸš€ Launching app: $APP_ID"
                      adb shell monkey -p "$APP_ID" -c android.intent.category.LAUNCHER 1

                      echo "ðŸ§ª Running Maestro tests"
                      maestro test ./e2e

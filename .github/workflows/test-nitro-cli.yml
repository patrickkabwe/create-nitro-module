name: Test Nitro CLI - Generate & Build

permissions:
    contents: write
    actions: read

on:
    workflow_run:
        workflows: ['Generate Packages']
        types:
            - completed
    workflow_dispatch:

concurrency:
    group: ${{ github.workflow }}-${{ github.ref }}
    cancel-in-progress: true

jobs:
    test-ios-build:
        name: Test iOS Build - ${{ matrix.pm }} - ${{ matrix.package-type }} (${{ matrix.mode }})
        if: github.event.workflow_run.conclusion == 'success'
        runs-on: macOS-15
        strategy:
            matrix:
                pm: ['bun', 'yarn']
                package-type: ['module', 'view']
                mode: ['Debug', 'Release']
        env:
            WORKING_DIR: ${{ github.workspace }}/react-native-test-${{ matrix.package-type }}
        steps:
            - name: Create working directory
              run: mkdir -p ${{ env.WORKING_DIR }}

            - name: Download generated package
              uses: actions/download-artifact@v4
              with:
                  name: test-${{ matrix.package-type }}-${{ matrix.pm }}
                  path: ${{ env.WORKING_DIR }}
                  run-id: ${{ github.event.workflow_run.id }}
                  github-token: ${{ github.token }}
                  repository: ${{ github.repository }}

            - name: List package structure
              working-directory: ${{ env.WORKING_DIR }}
              run: |
                  echo "Package structure:"
                  find . -type f -name "*.json" -o -name "*.js" -o -name "*.ts" | head -20

            - name: Setup Ruby and CocoaPods
              uses: ruby/setup-ruby@v1
              with:
                  ruby-version: '3.2'
                  bundler-cache: true

            - name: Setup pnpm
              if: matrix.pm == 'pnpm'
              uses: pnpm/action-setup@v4
              with:
                  version: 10

            - name: Setup Node.js
              if: matrix.pm == 'yarn' || matrix.pm == 'pnpm'
              uses: actions/setup-node@v4
              with:
                  node-version: 22.x

            - name: Setup Yarn
              if: matrix.pm == 'yarn'
              run: |
                  corepack enable
                  cd ${{ env.WORKING_DIR }}
                  yarn set version 4.6.0
                  yarn config set enableImmutableInstalls false
                  yarn config set nodeLinker node-modules
                  touch yarn.lock

            - name: Setup Bun.js
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: latest

            - name: Install package dependencies
              working-directory: ${{ env.WORKING_DIR }}
              run: ${{ matrix.pm }} install

            - name: Run codegen
              working-directory: ${{ env.WORKING_DIR }}
              run: |
                  bunx nitro-codegen --logLevel="debug"
                  ${{ matrix.pm }} run build
                  node post-script.js

            - name: Install CocoaPods dependencies
              working-directory: ${{ env.WORKING_DIR }}/example
              run: ${{ matrix.pm }} pod

            - name: Install xcpretty
              run: |
                  gem install xcpretty

            - name: Build iOS project
              working-directory: ${{ env.WORKING_DIR }}/example/ios
              run: |
                  # Get the correct scheme name based on package type
                  if [ "${{ matrix.package-type }}" == "module" ]; then
                    SCHEME="TestModuleExample"
                  else
                    SCHEME="TestViewExample"
                  fi

                  set -o pipefail && xcodebuild \
                    CC=clang CPLUSPLUS=clang++ LD=clang LDPLUSPLUS=clang++ \
                    -derivedDataPath build -UseModernBuildSystem=YES \
                    -workspace "${SCHEME}.xcworkspace" \
                    -scheme "$SCHEME" \
                    -sdk iphonesimulator \
                    -configuration ${{ matrix.mode }} \
                    -destination 'platform=iOS Simulator,name=iPhone 16' \
                    build \
                    CODE_SIGNING_ALLOWED=NO | xcpretty

    test-android-build:
        name: Test Android Build - ${{ matrix.pm }} - ${{ matrix.package-type }} (${{ matrix.mode }})
        if: github.event.workflow_run.conclusion == 'success'
        runs-on: ubuntu-latest
        strategy:
            matrix:
                pm: ['bun', 'yarn']
                package-type: ['module', 'view']
                mode: ['Debug', 'Release']
        env:
            WORKING_DIR: ${{ github.workspace }}/react-native-test-${{ matrix.package-type }}
        steps:
            - name: Create working directory
              run: mkdir -p ${{ env.WORKING_DIR }}

            - name: Download generated package
              uses: actions/download-artifact@v4
              with:
                  name: test-${{ matrix.package-type }}-${{ matrix.pm }}
                  path: ${{ env.WORKING_DIR }}
                  run-id: ${{ github.event.workflow_run.id }}
                  github-token: ${{ github.token }}
                  repository: ${{ github.repository }}

            - name: List package structure
              working-directory: ${{ env.WORKING_DIR }}
              run: |
                  echo "Package structure:"
                  find . -type f -name "*.json" -o -name "*.js" -o -name "*.ts" | head -20

            - name: Setup pnpm
              if: matrix.pm == 'pnpm'
              uses: pnpm/action-setup@v4
              with:
                  version: 10

            - name: Setup Node.js
              if: matrix.pm == 'yarn' || matrix.pm == 'pnpm'
              uses: actions/setup-node@v4
              with:
                  node-version: 22.x

            - name: Setup Yarn
              if: matrix.pm == 'yarn'
              run: |
                  corepack enable
                  cd ${{ env.WORKING_DIR }}
                  yarn set version 4.6.0
                  yarn config set enableImmutableInstalls false
                  yarn config set nodeLinker node-modules
                  touch yarn.lock

            - name: Setup Bun.js
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: latest

            - name: Install package dependencies
              working-directory: ${{ env.WORKING_DIR }}
              run: ${{ matrix.pm }} install

            - name: Run codegen
              working-directory: ${{ env.WORKING_DIR }}
              run: |
                  bunx nitro-codegen --logLevel="debug"
                  ${{ matrix.pm }} run build
                  node post-script.js

            - name: Setup Java for Android builds
              uses: actions/setup-java@v4
              with:
                  distribution: 'zulu'
                  java-version: '17'
                  cache: "gradle"

            - name: Make gradlew executable
              working-directory: ${{ env.WORKING_DIR }}/example/android
              run: chmod +x ./gradlew

            - name: Clean and generate codegen artifacts
              working-directory: ${{ env.WORKING_DIR }}/example/android
              run: |
                  ./gradlew clean
                  ./gradlew generateCodegenArtifactsFromSchema

            - name: Build Android project
              working-directory: ${{ env.WORKING_DIR }}/example/android
              run: ./gradlew assemble${{ matrix.mode }} --no-daemon --build-cache

            - name: Stop Gradle daemon
              working-directory: ${{ env.WORKING_DIR }}/example/android
              run: ./gradlew --stop
